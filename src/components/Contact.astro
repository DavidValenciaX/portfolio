---
import { Mail, Phone, MapPin, Send, CheckCircle, AlertCircle, Download } from 'lucide-astro';
import { getLangFromUrl, useTranslations } from '../i18n';

interface Props {
  basics: any;
}

const { basics } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Resume PDF path based on language
const RESUME_PDF_PATH = lang === 'en' 
  ? '/Oscar_David_Valencia_resume_en.pdf'
  : '/Oscar_David_Valencia_resume_es.pdf';

// Web3Forms access key from environment variable
const WEB3FORMS_ACCESS_KEY = import.meta.env.WEB3FORMSACCESSKEY || '';
---

<section id="contact" class="contact-section">
  <div class="container">
    <div class="section-header">
      <h2>{t('contact.title')}</h2>
    </div>

    <div class="contact-content">
      <!-- Contact Information -->
      <div class="contact-info">
        <h3>{t('contact.info.title')}</h3>
        <p>{t('contact.info.description')}</p>
        
        <div class="contact-details">
          <div class="contact-item">
            <Mail size={20} />
            <div>
              <span class="label">{t('contact.email')}</span>
              <a href={`mailto:${basics.email}`}>{basics.email}</a>
            </div>
          </div>
          
          <div class="contact-item">
            <Phone size={20} />
            <div>
              <span class="label">{t('contact.phone')}</span>
              <a href={`tel:${basics.phone}`}>{basics.phone}</a>
            </div>
          </div>
          
          <div class="contact-item">
            <MapPin size={20} />
            <div>
              <span class="label">{t('contact.location')}</span>
              <span>{basics.location.city}, {basics.location.region}, {basics.location.countryCode}</span>
            </div>
          </div>
        </div>

        <!-- Social Links -->
        <div class="social-links">
          <!-- Download Resume Button -->
          <a 
            href={RESUME_PDF_PATH}
            download
            class="social-link download-resume-link"
            title={t('contact.downloadResume')}
          >
            <Download size={16} />
            <span>{t('contact.downloadResume')}</span>
          </a>

          {basics.profiles.map((profile: any) => (
            <a 
              href={profile.url} 
              target="_blank" 
              rel="noopener noreferrer"
              class="social-link"
              title={`${t('hero.visitProfile')} ${profile.network}`}
            >
              {profile.network}
            </a>
          ))}
        </div>
      </div>

      <!-- Contact Form -->
      <div class="contact-form-container">
        <form class="contact-form" id="contactForm">
          <div class="form-group">
            <label for="name">{t('contact.form.name')} *</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required 
              placeholder={t('contact.form.namePlaceholder')}
            />
            <span class="error-message" id="nameError"></span>
          </div>

          <div class="form-group">
            <label for="email">{t('contact.form.email')} *</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required 
              placeholder={t('contact.form.emailPlaceholder')}
            />
            <span class="error-message" id="emailError"></span>
          </div>

          <div class="form-group">
            <label for="subject">{t('contact.form.subject')} *</label>
            <input 
              type="text" 
              id="subject" 
              name="user_subject" 
              required 
              placeholder={t('contact.form.subjectPlaceholder')}
            />
            <span class="error-message" id="subjectError"></span>
          </div>

          <div class="form-group">
            <label for="message">{t('contact.form.message')} *</label>
            <textarea 
              id="message" 
              name="message" 
              rows="5" 
              required 
              placeholder={t('contact.form.messagePlaceholder')}
            ></textarea>
            <span class="error-message" id="messageError"></span>
          </div>

          <!-- Hidden fields for Web3Forms -->
          <input type="hidden" name="access_key" value={WEB3FORMS_ACCESS_KEY}>
          <input type="hidden" name="subject" id="hiddenSubject" data-prefix={lang === 'en' ? 'New message from the portfolio' : 'Nuevo mensaje del portafolio'} value="">
          <input type="hidden" name="from_name" value="Portfolio Contact Form">

          <button type="submit" class="submit-btn" id="submitBtn">
            <Send size={18} />
            <span>{t('contact.form.send')}</span>
          </button>

          <!-- Success/Error Messages -->
          <div class="form-message success-message" id="successMessage">
            <CheckCircle size={20} />
            <span>{t('contact.form.success')}</span>
          </div>

          <div class="form-message error-message-container" id="errorMessage">
            <AlertCircle size={20} />
            <span>{t('contact.form.error')}</span>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  .contact-section {
    padding: 4rem 0;
    background: var(--bg-secondary);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .section-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .section-header h2 {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .section-header p {
    font-size: 1.1rem;
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
  }

  .contact-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    align-items: start;
  }

  .contact-info h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .contact-info p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .contact-details {
    margin-bottom: 2rem;
  }

  .contact-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: var(--bg-primary);
    border-radius: 0.5rem;
    border: 1px solid var(--border-color);
  }

  .contact-item svg {
    color: var(--accent-primary);
    flex-shrink: 0;
  }

  .contact-item .label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-secondary);
    margin-bottom: 0.25rem;
  }

  .contact-item a {
    color: var(--text-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .contact-item a:hover {
    color: var(--accent-primary);
  }

  .social-links {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .social-link {
    padding: 0.5rem 1rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .social-link:hover {
    color: var(--accent-primary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-hover);
  }
  .download-resume-link {
    /* Distinct blue gradient styles for the CV button */
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: linear-gradient(135deg, var(--download-gradient-end), var(--download-gradient-mid), var(--download-gradient-start));
    color: white;
    border: 0;
  }

  .download-resume-link svg {
    flex-shrink: 0;
  }

  .download-resume-link:hover {
    /* Switch to green gradient on hover */
    background: linear-gradient(135deg, var(--green-gradient-end), var(--green-gradient-mid), var(--green-gradient-start));
    color: white;
  }

  .download-resume-link:focus-visible {
    outline: 3px solid rgba(59, 130, 246, 0.6);
    outline-offset: 2px;
  }

  .contact-form-container {
    background: var(--bg-primary);
    padding: 2rem;
    border-radius: 1rem;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    font-weight: 500;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .form-group input,
  .form-group textarea {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    background: var(--bg-secondary);
    color: var(--text-primary);
    font-size: 1rem;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  .error-message {
    color: #ef4444;
    font-size: 0.875rem;
    display: none;
  }

  .error-message.show {
    display: block;
  }

  .submit-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.875rem 2rem;
    background: var(--accent-primary);
    color: white;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .submit-btn:hover {
    background: var(--accent-secondary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-hover);
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .form-message {
    display: none;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
  }

  .form-message.show {
    display: flex;
  }

  .success-message {
    background: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }

  .error-message-container {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  /* Dark mode adjustments */
  [data-theme="dark"] .success-message {
    background: #064e3b;
    color: #6ee7b7;
    border-color: #047857;
  }

  [data-theme="dark"] .error-message-container {
    background: #7f1d1d;
    color: #fca5a5;
    border-color: #dc2626;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .contact-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .section-header h2 {
      font-size: 2rem;
    }

    .contact-form-container {
      padding: 1.5rem;
    }

    .contact-item {
      flex-direction: column;
      align-items: flex-start;
      text-align: left;
    }

    .social-links {
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .contact-section {
      padding: 2rem 0;
    }

    .section-header h2 {
      font-size: 1.75rem;
    }

    .contact-form-container {
      padding: 1rem;
    }
  }
</style>

<script>
  // Form validation and submission
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
    const successMessage = document.getElementById('successMessage') as HTMLElement;
    const errorMessage = document.getElementById('errorMessage') as HTMLElement;

    // Validation functions
    function validateEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function validateField(field: HTMLInputElement | HTMLTextAreaElement, errorElement: HTMLElement, validator?: (value: string) => boolean): boolean {
      const value = field.value.trim();
      let isValid = true;
      let errorMsg = '';

      if (!value) {
        isValid = false;
        errorMsg = 'This field is required';
      } else if (validator && !validator(value)) {
        isValid = false;
        if (field.type === 'email') {
          errorMsg = 'Please enter a valid email address';
        }
      }

      if (!isValid) {
        errorElement.textContent = errorMsg;
        errorElement.classList.add('show');
        field.style.borderColor = '#ef4444';
      } else {
        errorElement.classList.remove('show');
        field.style.borderColor = '';
      }

      return isValid;
    }

    // Real-time validation
    const nameField = document.getElementById('name') as HTMLInputElement;
    const emailField = document.getElementById('email') as HTMLInputElement;
    const subjectField = document.querySelector('input[name="user_subject"]') as HTMLInputElement;
    const messageField = document.getElementById('message') as HTMLTextAreaElement;

    const nameError = document.getElementById('nameError') as HTMLElement;
    const emailError = document.getElementById('emailError') as HTMLElement;
    const subjectError = document.getElementById('subjectError') as HTMLElement;
    const messageError = document.getElementById('messageError') as HTMLElement;

    nameField.addEventListener('blur', () => validateField(nameField, nameError));
    emailField.addEventListener('blur', () => validateField(emailField, emailError, validateEmail));
    subjectField.addEventListener('blur', () => validateField(subjectField, subjectError));
    messageField.addEventListener('blur', () => validateField(messageField, messageError));

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();

      // Validate all fields
      const isNameValid = validateField(nameField, nameError);
      const isEmailValid = validateField(emailField, emailError, validateEmail);
      const isSubjectValid = validateField(subjectField, subjectError);
      const isMessageValid = validateField(messageField, messageError);

      if (!isNameValid || !isEmailValid || !isSubjectValid || !isMessageValid) {
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<svg class="animate-spin" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg><span>Sending...</span>';

      try {
        // Build subject as: "<prefix>: <user subject>"
        const hiddenSubject = document.getElementById('hiddenSubject') as HTMLInputElement;
        const prefix = hiddenSubject?.dataset?.prefix || 'New message from the portfolio';
        const userSubjectValue = subjectField.value.trim();
        if (hiddenSubject) {
          hiddenSubject.value = `${prefix}: ${userSubjectValue}`;
        }

        const formData = new FormData(form);
        
        // Note: Replace with your actual Web3Forms access key
        const response = await fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          successMessage.classList.add('show');
          errorMessage.classList.remove('show');
          form.reset();
          
          // Hide success message after 5 seconds
          setTimeout(() => {
            successMessage.classList.remove('show');
          }, 5000);
        } else {
          throw new Error('Form submission failed');
        }
      } catch (error) {
        console.error('Error submitting form:', error);
        errorMessage.classList.add('show');
        successMessage.classList.remove('show');
        
        // Hide error message after 5 seconds
        setTimeout(() => {
          errorMessage.classList.remove('show');
        }, 5000);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="m22 2-7 20-4-9-9-4Z"></path><path d="M22 2 11 13"></path></svg><span>Send Message</span>';
      }
    });
  });
</script>