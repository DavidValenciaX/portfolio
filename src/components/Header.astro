---
import { useTranslations } from '../i18n';
import { Sun, Moon, Globe } from 'lucide-astro';
import LogoBlack from '../assets/svg/personal_DV_black_logo.svg?raw';
import LogoWhite from '../assets/svg/personal_DV_white_logo.svg?raw';
import type { Lang } from '../types/resume';

interface Props {
  lang?: Lang;
}

const { lang } = Astro.props;
const resolvedLang = lang ?? 'es';
const t = useTranslations(resolvedLang);
---

<header class="header">
  <a href={`#hero-${resolvedLang}`} class="skip-link">
    {resolvedLang === 'es' ? 'Saltar al contenido principal' : 'Skip to main content'}
  </a>
  <nav class="nav container">
    <div class="nav-brand">
      <a 
        href={`#hero-${resolvedLang}`} 
        class="brand-link"
        aria-label={resolvedLang === 'es' ? 'Ir al inicio - David Valencia' : 'Go to home - David Valencia'}
      >
        <div class="logo-container">
          <div class="logo logo-light" set:html={LogoBlack} />
          <div class="logo logo-dark" set:html={LogoWhite} />
        </div>
        <span class="brand-text">David Valencia</span>
      </a>
    </div>

    <div class="nav-menu" id="nav-menu">
      <ul class="nav-list">
        <li class="nav-item">
          <a href={`#hero-${resolvedLang}`} class="nav-link" data-i18n="nav.home" data-anchor="hero">{t('nav.home')}</a>
        </li>
        <li class="nav-item">
          <a href={`#about-${resolvedLang}`} class="nav-link" data-i18n="nav.about" data-anchor="about">{t('nav.about')}</a>
        </li>
        <li class="nav-item">
          <a href={`#projects-${resolvedLang}`} class="nav-link" data-i18n="nav.projects" data-anchor="projects">{t('nav.projects')}</a>
        </li>
        <li class="nav-item">
          <a href={`#contact-${resolvedLang}`} class="nav-link" data-i18n="nav.contact" data-anchor="contact">{t('nav.contact')}</a>
        </li>
      </ul>
    </div>

    <div class="nav-controls">
      <button 
        id="theme-toggle" 
        class="control-btn" 
        aria-label={t('theme.toggle')}
        title={t('theme.toggle')}
        data-i18n-title="theme.toggle"
        data-i18n-aria="theme.toggle"
      >
        <Sun class="theme-icon sun-icon" size={20} />
        <Moon class="theme-icon moon-icon" size={20} />
      </button>

      <div class="language-selector">
        <button 
          id="lang-toggle" 
          class="control-btn" 
          aria-label={t('lang.toggle')}
          title={t('lang.toggle')}
          data-i18n-title="lang.toggle"
          data-i18n-aria="lang.toggle"
        >
          <Globe size={20} />
        </button>
        <div class="lang-dropdown" id="lang-dropdown">
          <a href="#" class="lang-option" data-lang="es">
            <span class="lang-flag">ðŸ‡ªðŸ‡¸</span>
            EspaÃ±ol
          </a>
          <a href="#" class="lang-option" data-lang="en">
            <span class="lang-flag">ðŸ‡ºðŸ‡¸</span>
            English
          </a>
        </div>
      </div>

      <button 
        id="nav-toggle" 
        class="nav-toggle" 
        aria-label="Toggle navigation"
      >
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
      </button>
    </div>
  </nav>
</header>

<style>
  .skip-link {
    position: absolute;
    top: -100px;
    left: 1rem;
    z-index: 1001;
    padding: 0.75rem 1.5rem;
    background: var(--accent-primary);
    color: white;
    font-weight: 600;
    border-radius: 0.5rem;
    text-decoration: none;
    transition: top 0.3s ease;
  }

  .skip-link:focus {
    top: 1rem;
    outline: 3px solid var(--accent-secondary);
    outline-offset: 2px;
  }

  .header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background: var(--bg-secondary);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--border-color);
    z-index: 1000;
    transition: all 0.3s ease;
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 0;
    min-height: 70px;
  }

  .nav-brand {
    display: flex;
    align-items: center;
  }

  .brand-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-primary);
    font-weight: 600;
    font-size: 1.25rem;
    text-decoration: none;
  }

  .logo-container {
    position: relative;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .logo {
    width: 40px;
    height: 40px;
    display: block;
    transition: opacity 0.3s ease;
  }

  .logo :global(svg) {
    width: 100%;
    height: 100%;
    display: block;
  }

  /* Show black logo in light theme */
  :global([data-theme="light"]) .logo-dark {
    display: none;
  }

  /* Show white logo in dark theme */
  :global([data-theme="dark"]) .logo-light {
    display: none;
  }

  .brand-text {
    color: var(--text-primary);
    font-weight: 600;
  }

  .nav-menu {
    display: flex;
    align-items: center;
  }

  .nav-list {
    display: flex;
    list-style: none;
    gap: 2rem;
    margin: 0;
    padding: 0;
  }

  .nav-link {
    color: var(--text-secondary);
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
    transition: color 0.3s ease;
  }

  .nav-link:hover {
    color: var(--accent-primary);
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent-primary);
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  .nav-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .control-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 0.5rem;
    background: var(--bg-card);
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border-color);
  }

  .control-btn:hover {
    background: var(--accent-primary);
    color: white;
    transform: translateY(-2px);
  }

  .theme-icon {
    transition: all 0.3s ease;
  }

  :global([data-theme="light"]) .moon-icon {
    display: none;
  }

  :global([data-theme="dark"]) .sun-icon {
    display: none;
  }

  .language-selector {
    position: relative;
  }

  .lang-dropdown {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    min-width: 150px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 100;
  }

  .lang-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .lang-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: var(--text-secondary);
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .lang-option:hover {
    background: var(--bg-secondary);
    color: var(--accent-primary);
  }

  .lang-flag {
    font-size: 1.2rem;
  }

  .nav-toggle {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .hamburger-line {
    width: 25px;
    height: 3px;
    background: var(--text-primary);
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .nav-toggle {
      display: flex;
    }

    .nav-menu {
      position: fixed;
      top: 70px;
      left: 0;
      width: 100%;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border-color);
      transform: translateX(-100%);
      transition: transform 0.3s ease;
    }

    .nav-menu.active {
      transform: translateX(0);
    }

    .nav-list {
      flex-direction: column;
      padding: 2rem 1rem;
      gap: 1rem;
    }

    .nav-link {
      font-size: 1.1rem;
      padding: 0.75rem 0;
    }

    .nav-toggle.active .hamburger-line:nth-child(1) {
      transform: rotate(45deg) translate(6px, 6px);
    }

    .nav-toggle.active .hamburger-line:nth-child(2) {
      opacity: 0;
    }

    .nav-toggle.active .hamburger-line:nth-child(3) {
      transform: rotate(-45deg) translate(6px, -6px);
    }
  }

  @media (max-width: 480px) {
    .nav {
      padding: 0.75rem 0;
    }

    .brand-text {
      display: none;
    }

    .nav-controls {
      gap: 0.5rem;
    }

    .control-btn {
      width: 36px;
      height: 36px;
    }
  }
</style>

<script>
  import { initTheme, toggleTheme, watchSystemTheme } from '../scripts/theme';
  import { setupLanguageSwitchListeners } from '../scripts/language-persistence';
  import { ui, defaultLang } from '../i18n';

  // Initialize theme
  initTheme();
  watchSystemTheme();

  // Theme toggle
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle?.addEventListener('click', toggleTheme);

  // Language toggle
  const langToggle = document.getElementById('lang-toggle');
  const langDropdown = document.getElementById('lang-dropdown');

  langToggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    langDropdown?.classList.toggle('active');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', () => {
    langDropdown?.classList.remove('active');
  });

  // Setup language option click to switch language client-side
  const langOptions = document.querySelectorAll('.lang-option');
  langOptions.forEach((option) => {
    option.addEventListener('click', (e) => {
      e.preventDefault();
      const target = e.currentTarget as HTMLElement;
      const nextLang = target.dataset.lang || 'es';
      window.dispatchEvent(new CustomEvent('switch-language', { detail: { lang: nextLang } }));
    });
  });

  // Apply translations to header on initial load and when language changes
  function translate(key: keyof typeof ui[typeof defaultLang], lang: keyof typeof ui) {
    return ui[lang]?.[key] ?? ui[defaultLang][key];
  }

  function applyHeaderTranslations(lang: keyof typeof ui) {
    // Update visible nav link texts
    document.querySelectorAll('[data-i18n]')?.forEach((el) => {
      const key = (el as HTMLElement).getAttribute('data-i18n') as keyof typeof ui[typeof defaultLang] | null;
      if (!key) return;
      (el as HTMLElement).textContent = translate(key, lang);
    });

    // Update anchors to point to language-specific section IDs
    const skipLink = document.querySelector('.skip-link') as HTMLAnchorElement | null;
    if (skipLink) skipLink.href = `#hero-${lang}`;
    const brandLink = document.querySelector('.brand-link') as HTMLAnchorElement | null;
    if (brandLink) brandLink.href = `#hero-${lang}`;

    document.querySelectorAll('.nav-link')?.forEach((el) => {
      const base = (el as HTMLAnchorElement).getAttribute('data-anchor');
      if (!base) return;
      (el as HTMLAnchorElement).href = `#${base}-${lang}`;
    });

    // Update control buttons' aria-label and title
    const themeToggleBtn = document.getElementById('theme-toggle');
    if (themeToggleBtn) {
      const label = translate('theme.toggle', lang);
      themeToggleBtn.setAttribute('aria-label', label);
      themeToggleBtn.setAttribute('title', label);
    }

    const langToggleBtn = document.getElementById('lang-toggle');
    if (langToggleBtn) {
      const label = translate('lang.toggle', lang);
      langToggleBtn.setAttribute('aria-label', label);
      langToggleBtn.setAttribute('title', label);
    }
  }

  // Initialize header translations based on persisted preference
  const initialLang = (localStorage.getItem('lang') as keyof typeof ui) || 'es';
  applyHeaderTranslations(initialLang);

  // React to global language switch event
  window.addEventListener('switch-language', (e) => {
    const lang = (e as CustomEvent).detail?.lang as keyof typeof ui | undefined;
    if (!lang) return;
    applyHeaderTranslations(lang);
  });

  // Mobile navigation toggle
  const navToggle = document.getElementById('nav-toggle');
  const navMenu = document.getElementById('nav-menu');

  navToggle?.addEventListener('click', () => {
    navToggle.classList.toggle('active');
    navMenu?.classList.toggle('active');
  });

  // Close mobile menu when clicking on links
  const navLinks = document.querySelectorAll('.nav-link');
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      navToggle?.classList.remove('active');
      navMenu?.classList.remove('active');
    });
  });
</script>