---
import { useTranslations } from '../i18n';
import { Download, MapPin, Mail, Phone } from 'lucide-astro';
import type { Basics, Lang } from '../types/resume';

interface Props {
  basics: Basics;
  lang?: Lang;
}

const { basics, lang } = Astro.props;
const resolvedLang = lang ?? 'es';
const t = useTranslations(resolvedLang);
---

<section class="hero" id={`hero-${resolvedLang}`}>
  <div class="container">
    <div class="hero-content">
      <div class="hero-text">
        <h1 class="hero-title">
          <span class="greeting">{t('hero.greeting')}</span>
          <span class="name">{basics.name}</span>
        </h1>
        <p class="hero-subtitle">{basics.label}</p>
        <p class="hero-description"><em>{t('hero.summary')}</em></p>
        
        <div class="hero-info">
          <div class="info-item">
            <MapPin size={16} />
            <span>{basics.location.city}, {basics.location.region}, {basics.location.countryCode}</span>
          </div>
          <div class="info-item">
            <Mail size={16} />
            <a href={`mailto:${basics.email}`}>{basics.email}</a>
          </div>
          <div class="info-item">
            <Phone size={16} />
            <a href={`tel:${basics.phone}`}>{basics.phone}</a>
          </div>
        </div>

        <div class="hero-actions">
          <a href={`mailto:${basics.email}`} class="btn btn-primary">
            <Mail size={18} />
            {t('hero.contact')}
          </a>
          <a 
            href={lang === 'en' ? '/Oscar_David_Valencia_resume_en.pdf' : '/Oscar_David_Valencia_resume_es.pdf'} 
            class="btn btn-secondary" 
            download={`Oscar_David_Valencia_resume_${lang}.pdf`}
          >
            <Download size={18} />
            {t('hero.downloadResume')}
          </a>
        </div>

        <div class="hero-social">
          {basics.profiles.map((profile) => (
            <a 
              href={profile.url} 
              target="_blank" 
              rel="noopener noreferrer"
              class="social-link"
              aria-label={`${t('hero.visitProfile')} ${profile.network}`}
            >
              {profile.network}
            </a>
          ))}
        </div>
      </div>

      <div class="hero-image">
        <div class="image-container" id="profile-image-container">
          <img
            id="profile-image"
            src="/profile.jpg"
            alt={`${basics.name} - ${basics.label}`}
            class="profile-image"
            loading="eager"
          />
          <img
            id="smile-profile-image"
            src="/smile_profile.jpg"
            alt={`${basics.name} - ${basics.label} - Smiling`}
            class="profile-image smile-image"
            loading="eager"
          />
          <div class="image-decoration"></div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  function setupSmile(container: HTMLDivElement) {
    if ((container as HTMLDivElement).dataset.smileBound === 'true') return;
    (container as HTMLDivElement).dataset.smileBound = 'true';

    const profileImage = container.querySelector('#profile-image') as HTMLImageElement;
    const smileImage = container.querySelector('#smile-profile-image') as HTMLImageElement;

    let resetTimeout: number | null = null;
    let isHolding = false;
    let isMouseDown = false; // Track mouse button state
    let holdStartTime: number | null = null; // Track when the hold started
    let justFinishedHold = false; // Track if we just finished a hold operation

    function showSmile() {
      if (document.startViewTransition) {
        document.startViewTransition(() => {
          profileImage.style.opacity = '0';
          smileImage.style.opacity = '1';
        });
      } else {
        profileImage.style.opacity = '0';
        smileImage.style.opacity = '1';
      }
    }

    function hideSmile() {
      if (document.startViewTransition) {
        document.startViewTransition(() => {
          profileImage.style.opacity = '1';
          smileImage.style.opacity = '0';
        });
      } else {
        profileImage.style.opacity = '1';
        smileImage.style.opacity = '0';
      }
    }

    function startHold() {
      isHolding = true;
      holdStartTime = Date.now(); // Record when the hold started
      if (resetTimeout) {
        clearTimeout(resetTimeout);
        resetTimeout = null;
      }
      showSmile();
    }

    function endHold() {
      isHolding = false;
      justFinishedHold = true; // Mark that we just finished a hold
      
      // Check if more than 2 seconds have passed since hold started
      const elapsedTime = holdStartTime ? Date.now() - holdStartTime : 0;
      
      if (resetTimeout) {
        clearTimeout(resetTimeout);
      }
      
      if (elapsedTime >= 2000) {
        // If more than 2 seconds have passed, hide smile immediately
        hideSmile();
        resetTimeout = null;
      } else {
        // Otherwise, set timeout to hide smile after remaining time
        const remainingTime = 2000 - elapsedTime;
        resetTimeout = window.setTimeout(() => {
          if (!isHolding) {
            hideSmile();
          }
        }, remainingTime);
      }
      
      // Reset hold start time
      holdStartTime = null;
      
      // Reset the justFinishedHold flag after a short delay to allow click event to be ignored
      setTimeout(() => {
        justFinishedHold = false;
      }, 50);
    }

    // Mouse events
    container.addEventListener('mousedown', () => {
      isMouseDown = true;
      startHold();
    });
    container.addEventListener('mouseup', () => {
      isMouseDown = false;
      endHold();
    });
    container.addEventListener('mouseleave', () => {
      // Only end hold if mouse button is not pressed
      if (isHolding && !isMouseDown) {
        endHold();
      }
    });

    // Global mouseup to handle mouse release outside container
    document.addEventListener('mouseup', () => {
      if (isMouseDown) {
        isMouseDown = false;
        if (isHolding) {
          endHold();
        }
      }
    });

    // Touch events
    container.addEventListener('touchstart', (e) => {
      e.preventDefault();
      startHold();
    });
    container.addEventListener('touchend', () => {
      endHold();
    });
    container.addEventListener('touchcancel', () => {
      endHold();
    });

    // Click event (for quick taps)
    container.addEventListener('click', () => {
      // Ignore click events that happen immediately after finishing a hold
      if (justFinishedHold) {
        return;
      }
      
      if (!isHolding) {
        showSmile();
        if (resetTimeout) {
          clearTimeout(resetTimeout);
        }
        resetTimeout = window.setTimeout(() => {
          hideSmile();
        }, 2000);
      }
    });
  }

  const containers = document.querySelectorAll('.image-container') as NodeListOf<HTMLDivElement>;
  containers.forEach((c) => setupSmile(c));
</script>

<style>
  .hero {
    padding: 6rem 0 4rem;
    background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    position: relative;
    overflow: hidden;
  }

  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 20% 80%, var(--accent-primary-15) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, var(--accent-secondary-15) 0%, transparent 50%);
    pointer-events: none;
  }

  .hero-content {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 4rem;
    align-items: center;
    position: relative;
    z-index: 1;
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: 1rem;
  }

  .greeting {
    display: block;
    font-size: 0.6em;
    font-weight: 500;
    color: var(--accent-primary);
    margin-bottom: 0.5rem;
  }

  .name {
    display: block;
    background: linear-gradient(135deg, var(--text-primary), var(--accent-primary));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero-subtitle {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--accent-secondary);
    margin-bottom: 1.5rem;
  }

  .hero-description {
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    max-width: 600px;
  }

  .hero-info {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 2.5rem;
  }

  .info-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    font-size: 0.95rem;
  }

  .info-item svg {
    color: var(--accent-primary);
    flex-shrink: 0;
  }

  .info-item a {
    color: inherit;
    transition: color 0.3s ease;
  }

  .info-item a:hover {
    color: var(--accent-primary);
  }

  .hero-actions {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .hero-social {
    display: flex;
    gap: 1rem;
  }

  .social-link {
    padding: 0.5rem 1rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    color: var(--text-secondary);
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .social-link:hover {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
    transform: translateY(-2px);
  }

  .hero-image {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .image-container {
    position: relative;
    width: 280px;
    height: 280px;
  }

  .profile-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid var(--accent-primary);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    z-index: 2;
  }

  .smile-image {
    opacity: 0;
  }

  .image-decoration {
    position: absolute;
    top: -10px;
    left: -10px;
    right: -10px;
    bottom: -10px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    opacity: 0.2;
    z-index: 1;
    animation: pulse 3s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.2;
    }
    50% {
      transform: scale(1.05);
      opacity: 0.3;
    }
  }

  @media (max-width: 768px) {
    .hero {
      padding: 4rem 0 3rem;
    }

    .hero-content {
      grid-template-columns: 1fr;
      gap: 3rem;
      text-align: center;
    }

    .hero-image {
      order: -1;
    }

    .image-container {
      width: 220px;
      height: 220px;
    }

    .hero-actions {
      justify-content: center;
    }

    .hero-social {
      justify-content: center;
    }

    .hero-info {
      align-items: center;
    }
  }

  @media (max-width: 480px) {
    .hero-actions {
      flex-direction: column;
      align-items: center;
    }

    .hero-social {
      flex-direction: column;
      align-items: center;
    }

    .image-container {
      width: 180px;
      height: 180px;
    }
  }
</style>